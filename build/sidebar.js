console.log("LLM Agent: Sidebar loaded");let contexts=[],chatHistory=[],currentFormat="text",isLoading=!1,notes=[],currentTab="chat",settings={responseStyle:"Be concise and direct. Avoid unnecessary elaboration.",apiEndpoint:"http://localhost:1234/v1/chat/completions",maxTokens:1e3,renderMarkdown:!1};const contextWindow=document.getElementById("contextWindow"),contextTabs=document.getElementById("contextTabs"),contextCount=document.getElementById("contextCount"),contextCollapseBtn=document.getElementById("contextCollapseBtn"),addContextBtn=document.getElementById("addContextBtn"),clearContextBtn=document.getElementById("clearContextBtn"),chatMessages=document.getElementById("chatMessages"),chatInput=document.getElementById("chatInput"),sendBtn=document.getElementById("sendBtn"),formatButtons=document.querySelectorAll(".format-btn"),settingsBtn=document.getElementById("settingsBtn"),settingsModal=document.getElementById("settingsModal"),closeSettingsBtn=document.getElementById("closeSettings"),saveSettingsBtn=document.getElementById("saveSettings"),resetSettingsBtn=document.getElementById("resetSettings"),tabButtons=document.querySelectorAll(".tab-btn"),chatTab=document.getElementById("chatTab"),journalTab=document.getElementById("journalTab"),journalContainer=document.getElementById("journalMessages"),journalInput=document.getElementById("journalInput"),journalSendBtn=document.getElementById("journalSendBtn"),clearJournalBtn=document.getElementById("clearJournal");function loadStoredData(){chrome.runtime.sendMessage({type:"GET_STORED_CONTEXTS"},(e=>{e&&e.contexts&&(contexts=e.contexts,updateContextList())})),chrome.runtime.sendMessage({type:"GET_CHAT_HISTORY"},(e=>{e&&e.history&&(chatHistory=e.history,updateChatMessages())})),loadStoredNotes(),loadJournal(),checkPendingJournalEntries()}function loadStoredNotes(){chrome.storage.local.get(["notes"],(e=>{e.notes&&(notes=e.notes,updateNotesList())}))}function checkPendingJournalEntries(){chrome.storage.local.get(["pendingJournalEntry"],(e=>{if(e.pendingJournalEntry){const t=e.pendingJournalEntry,n={id:Date.now(),type:t.type,content:t.content,sourceUrl:t.sourceUrl,sourceTitle:t.sourceTitle,timestamp:t.timestamp};journalMessages.push(n),renderJournalMessages(),saveJournal(),switchTab("journal"),chrome.storage.local.remove(["pendingJournalEntry"])}}))}function saveNotes(){chrome.storage.local.set({notes})}function loadSettings(){chrome.storage.local.get(["llmSettings"],(e=>{e.llmSettings&&(settings={...settings,...e.llmSettings}),updateSettingsUI()}))}function saveSettings(){chrome.storage.local.set({llmSettings:settings})}function setupEventListeners(){formatButtons.forEach((e=>{e.addEventListener("click",(()=>{formatButtons.forEach((e=>e.classList.remove("active"))),e.classList.add("active"),currentFormat=e.dataset.format}))})),tabButtons.forEach((e=>{e.addEventListener("click",(()=>{switchTab(e.dataset.tab)}))})),addContextBtn.addEventListener("click",showContextMenu),clearContextBtn.addEventListener("click",clearContext),contextCollapseBtn.addEventListener("click",toggleContextCollapse),chatInput.addEventListener("keydown",(e=>{"Enter"!==e.key||e.shiftKey||(e.preventDefault(),sendMessage())})),sendBtn.addEventListener("click",sendMessage),settingsBtn.addEventListener("click",openSettings),closeSettingsBtn.addEventListener("click",closeSettings),saveSettingsBtn.addEventListener("click",handleSaveSettings),resetSettingsBtn.addEventListener("click",resetSettings),journalSendBtn.addEventListener("click",sendJournalMessage),journalInput.addEventListener("keydown",(e=>{"Enter"!==e.key||e.shiftKey||(e.preventDefault(),sendJournalMessage())})),clearJournalBtn.addEventListener("click",clearJournal),settingsModal.addEventListener("click",(e=>{e.target===settingsModal&&closeSettings()})),setupContextMenu()}function addCurrentTab(){chrome.tabs.query({active:!0,currentWindow:!0},(e=>{e[0]&&chrome.tabs.sendMessage(e[0].id,{type:"GET_PAGE_CONTENT"},(e=>{e&&addContext(e)}))}))}function addAllTabs(){chrome.runtime.sendMessage({type:"GET_ALL_TABS"},(e=>{e&&e.tabs&&e.tabs.forEach((e=>{e.url&&!e.url.startsWith("chrome://")&&chrome.tabs.sendMessage(e.id,{type:"GET_PAGE_CONTENT"},(e=>{e&&addContext(e)}))}))}))}function addContext(e){const t=contexts.findIndex((t=>t.url===e.url));t>=0?contexts[t]=e:contexts.push(e),updateContextList(),chrome.runtime.sendMessage({type:"PAGE_DATA",data:e})}function clearContext(){contexts=[],chatHistory=[],updateContextList(),updateChatMessages(),chrome.runtime.sendMessage({type:"CLEAR_CONTEXTS"}),chrome.runtime.sendMessage({type:"CLEAR_CHAT_HISTORY"})}function toggleContextCollapse(){contextWindow.classList.toggle("collapsed")}function showContextMenu(){const e=document.createElement("div");e.style.cssText="\n    position: fixed;\n    background: #171717;\n    border: 1px solid #262626;\n    border-radius: 6px;\n    box-shadow: 0 4px 12px rgba(0,0,0,0.3);\n    z-index: 1000;\n    min-width: 120px;\n  ",e.innerHTML='\n    <div style="padding: 4px;">\n      <button onclick="addCurrentTab(); this.parentElement.parentElement.remove()" style="width: 100%; padding: 8px 12px; background: none; border: none; color: #e5e5e5; text-align: left; cursor: pointer; border-radius: 4px; font-size: 12px;" onmouseover="this.style.background=\'#262626\'" onmouseout="this.style.background=\'none\'">Add Current Tab</button>\n      <button onclick="addAllTabs(); this.parentElement.parentElement.remove()" style="width: 100%; padding: 8px 12px; background: none; border: none; color: #e5e5e5; text-align: left; cursor: pointer; border-radius: 4px; font-size: 12px;" onmouseover="this.style.background=\'#262626\'" onmouseout="this.style.background=\'none\'">Add All Tabs</button>\n    </div>\n  ';const t=addContextBtn.getBoundingClientRect();e.style.left=t.left+"px",e.style.top=t.bottom+4+"px",document.body.appendChild(e),setTimeout((()=>{document.addEventListener("click",(function t(n){e.contains(n.target)||(e.remove(),document.removeEventListener("click",t))}))}),0)}function openTab(e){chrome.tabs.create({url:e})}document.addEventListener("DOMContentLoaded",(()=>{loadStoredData(),loadSettings(),setupEventListeners(),setupContextMenu(),updateUI()}));let journalMessages=[];function loadJournal(){chrome.storage.local.get(["journalMessages"],(e=>{e.journalMessages&&(journalMessages=e.journalMessages,renderJournalMessages())}))}function saveJournal(){chrome.storage.local.set({journalMessages})}function sendJournalMessage(){const e=journalInput;if(!e||!e.value.trim())return;const t={id:Date.now(),type:"user",content:e.value.trim(),timestamp:(new Date).toISOString()};journalMessages.push(t),e.value="",renderJournalMessages(),saveJournal()}function clearJournal(){confirm("Are you sure you want to clear your journal? This cannot be undone.")&&(journalMessages=[],renderJournalMessages(),chrome.storage.local.remove("journalMessages"))}function renderJournalMessages(){const e=journalContainer;if(!e)return;if(e.innerHTML="",0===journalMessages.length)return void(e.innerHTML='<div class="journal-empty">No messages yet. Start writing your thoughts!</div>');const t={};journalMessages.forEach((e=>{const n=new Date(e.timestamp).toDateString();t[n]||(t[n]=[]),t[n].push(e)})),Object.keys(t).sort(((e,t)=>new Date(t).getTime()-new Date(e).getTime())).forEach((n=>{const o=new Date(n),s=new Date,a=new Date(s);a.setDate(s.getDate()-1);const i=document.createElement("div");let r;i.className="journal-date-header",r=o.toDateString()===s.toDateString()?"Today":o.toDateString()===a.toDateString()?"Yesterday":o.toLocaleDateString("en-US",{weekday:"long",year:"numeric",month:"long",day:"numeric"}),i.textContent=r,e.appendChild(i),t[n].forEach((t=>{const n=document.createElement("div");n.className=`journal-message ${t.type}`;const o=new Date(t.timestamp).toLocaleString("en-US",{hour:"numeric",minute:"2-digit",hour12:!0});"quote"===t.type?n.innerHTML=`\n          <div class="journal-message-content">${t.content}</div>\n          <div class="journal-quote-source">\n            <a href="${t.sourceUrl}" target="_blank">${t.sourceTitle||"Source"}</a>\n          </div>\n          <div class="journal-message-time">${o}</div>\n        `:n.innerHTML=`\n          <div class="journal-message-content">${t.content}</div>\n          <div class="journal-message-time">${o}</div>\n        `,e.appendChild(n)}))})),e.scrollTop=e.scrollHeight}function addToJournal(e,t,n){const o={id:Date.now(),type:"quote",content:e,sourceUrl:t,sourceTitle:n,timestamp:(new Date).toISOString()};journalMessages.push(o),renderJournalMessages(),saveJournal(),"journal"!==currentTab&&switchTab("journal")}function setupContextMenu(){console.log("Context menu setup delegated to background script")}function updateContextList(){const e=contexts.length+1;contextCount.textContent=e.toString(),0!==contexts.length?contextTabs.innerHTML=contexts.map(((e,t)=>`\n    <div class="context-tab" onclick="openTab('${e.url}')">\n      <div class="context-tab-favicon"></div>\n      <div class="context-tab-info">\n        <div class="context-tab-title">${e.title||"Untitled"}</div>\n        <div class="context-tab-url">${new URL(e.url).hostname}</div>\n      </div>\n      <button class="context-tab-close" onclick="event.stopPropagation(); removeContext(${t})" title="Remove from context">×</button>\n    </div>\n  `)).join(""):contextTabs.innerHTML='<div class="context-empty">Current tab included automatically</div>'}function removeContext(e){contexts.splice(e,1),updateContextList()}function openSettings(){updateSettingsUI(),settingsModal.classList.add("active")}function closeSettings(){settingsModal.classList.remove("active")}function updateSettingsUI(){document.getElementById("responseStyle").value=settings.responseStyle,document.getElementById("apiEndpoint").value=settings.apiEndpoint,document.getElementById("maxTokens").value=settings.maxTokens,document.getElementById("renderMarkdown").checked=settings.renderMarkdown}function handleSaveSettings(){settings.responseStyle=document.getElementById("responseStyle").value,settings.apiEndpoint=document.getElementById("apiEndpoint").value,settings.maxTokens=parseInt(document.getElementById("maxTokens").value),settings.renderMarkdown=document.getElementById("renderMarkdown").checked,saveSettings(),closeSettings()}function resetSettings(){settings={responseStyle:"Be concise and direct. Avoid unnecessary elaboration.",apiEndpoint:"http://localhost:1234/v1/chat/completions",maxTokens:1e3,renderMarkdown:!1},updateSettingsUI(),saveSettings()}async function sendMessage(){const e=chatInput.value.trim();if(e&&!isLoading){chatHistory.push({role:"user",content:e}),updateChatMessages(),chatInput.value="",setLoading(!0);try{const e=await new Promise((e=>{chrome.runtime.sendMessage({type:"GET_CURRENT_TAB_CONTENT"},(t=>{e(t)}))}));let t="";e&&(t+="CURRENT TAB (what user is referring to by default):\n",t+=`URL: ${e.url}\n`,t+=`Title: ${e.title}\n`,t+=`Content: ${e.content.slice(0,3e3)}...\n\n`),contexts.length>0&&(t+="ADDITIONAL CONTEXT:\n",t+=contexts.map((e=>`URL: ${e.url}\nTitle: ${e.title}\nContent: ${e.content.slice(0,2e3)}...`)).join("\n\n---\n\n"));const n={text:"Respond in plain text format.",json:"Respond in valid JSON format.",table:"Respond in markdown table format when appropriate."},o=`You are an AI assistant that helps users analyze and understand content from their browser tabs and visited pages. \n\n${settings.responseStyle}\n\nWhen users ask questions like "summarize this", "what's the main point", "explain this", etc., they are referring to the CURRENT TAB content by default. Only reference additional context when explicitly asked or when it's clearly relevant.\n\nContext from user's tabs and pages:\n${t}\n\n${n[currentFormat]}\n\nPlease provide helpful, accurate responses based on the context provided. Focus on the current tab content unless the user specifically asks about other pages.`,s=await fetch(settings.apiEndpoint,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({model:"local-model",messages:[{role:"system",content:o},...chatHistory.slice(-10)],temperature:.7,max_tokens:settings.maxTokens})});if(!s.ok)throw new Error(`LM Studio API error: ${s.status}`);const a=(await s.json()).choices[0].message.content;chatHistory.push({role:"assistant",content:a}),updateChatMessages(),chrome.runtime.sendMessage({type:"SAVE_CHAT_HISTORY",history:chatHistory})}catch(e){console.error("Error sending message to LLM:",e),chatHistory.push({role:"assistant",content:`Error: ${e.message}. Please make sure LM Studio is running on http://localhost:1234`}),updateChatMessages()}finally{setLoading(!1)}}}function updateChatMessages(){0!==chatHistory.length?(chatMessages.innerHTML=chatHistory.map(((e,t)=>{let n=e.content;settings.renderMarkdown||(n=n.replace(/\*\*(.*?)\*\*/g,"$1").replace(/\*(.*?)\*/g,"$1").replace(/`(.*?)`/g,"$1").replace(/#{1,6}\s/g,"").replace(/\[(.*?)\]\(.*?\)/g,"$1"));const o="assistant"===e.role?`<button class="note-action-btn" onclick="saveMessageToNotepad(${t})" title="Save to notepad" style="position: absolute; top: 4px; right: 4px; background: rgba(0,0,0,0.5); border: none; color: #a3a3a3; padding: 4px 6px; border-radius: 3px; cursor: pointer;">📋</button>`:"";return`\n      <div class="message ${e.role}" style="position: relative;">\n        ${o}\n        ${n.replace(/\n/g,"<br>")}\n      </div>\n    `})).join(""),chatMessages.scrollTop=chatMessages.scrollHeight):chatMessages.innerHTML='<div class="empty-state">Current tab is automatically included. Ask questions about this page or add more context.</div>'}function setLoading(e){if(isLoading=e,sendBtn.disabled=e,sendBtn.textContent=e?"Sending...":"Send",e){const e=document.createElement("div");e.className="loading",e.innerHTML='<div class="spinner"></div> Thinking...',chatMessages.appendChild(e),chatMessages.scrollTop=chatMessages.scrollHeight}else{const e=chatMessages.querySelector(".loading");e&&e.remove()}}function updateUI(){updateContextList(),updateChatMessages()}function switchTab(e){currentTab=e,tabButtons.forEach((t=>{t.classList.remove("active"),t.dataset.tab===e&&t.classList.add("active")})),document.querySelectorAll(".tab-content").forEach((e=>{e.classList.remove("active")})),"chat"===e?chatTab.classList.add("active"):"journal"===e&&(journalTab.classList.add("active"),loadJournal())}function showAddNoteModal(){const e=document.createElement("div");e.className="modal-overlay active",e.innerHTML='\n    <div class="note-input-modal">\n      <div class="modal-header">\n        <h2>Add New Note</h2>\n        <button class="modal-close" onclick="closeAddNoteModal()">×</button>\n      </div>\n      <div class="note-input-content">\n        <textarea class="note-input-textarea" placeholder="Enter your note here..." autofocus></textarea>\n      </div>\n      <div class="modal-footer">\n        <button class="btn" onclick="closeAddNoteModal()">Cancel</button>\n        <button class="btn primary" onclick="saveNewNote()">Save Note</button>\n      </div>\n    </div>\n  ',document.body.appendChild(e),setTimeout((()=>{e.querySelector(".note-input-textarea").focus()}),100),e.addEventListener("click",(t=>{t.target===e&&closeAddNoteModal()}))}function closeAddNoteModal(){const e=document.querySelector(".modal-overlay.active");e&&e.querySelector(".note-input-modal")&&e.remove()}function saveNewNote(){const e=document.querySelector(".modal-overlay.active").querySelector(".note-input-textarea").value.trim();if(!e)return void alert("Please enter some content for the note.");const t={id:Date.now(),content:e,timestamp:(new Date).toISOString(),source:"manual"};notes.unshift(t),saveNotes(),updateNotesList(),closeAddNoteModal()}function addNoteFromText(e,t="chat"){const n={id:Date.now(),content:e,timestamp:(new Date).toISOString(),source:t};notes.unshift(n),saveNotes(),updateNotesList()}function deleteNote(e){confirm("Are you sure you want to delete this note?")&&(notes=notes.filter((t=>t.id!==e)),saveNotes(),updateNotesList())}function editNote(e){const t=notes.find((t=>t.id===e));if(!t)return;const n=document.createElement("div");n.className="modal-overlay active",n.innerHTML=`\n    <div class="note-input-modal">\n      <div class="modal-header">\n        <h2>Edit Note</h2>\n        <button class="modal-close" onclick="closeEditNoteModal()">×</button>\n      </div>\n      <div class="note-input-content">\n        <textarea class="note-input-textarea" autofocus>${t.content}</textarea>\n      </div>\n      <div class="modal-footer">\n        <button class="btn" onclick="closeEditNoteModal()">Cancel</button>\n        <button class="btn primary" onclick="saveEditedNote(${e})">Save Changes</button>\n      </div>\n    </div>\n  `,document.body.appendChild(n),setTimeout((()=>{const e=n.querySelector(".note-input-textarea");e.focus(),e.select()}),100),n.addEventListener("click",(e=>{e.target===n&&closeEditNoteModal()}))}function closeEditNoteModal(){const e=document.querySelector(".modal-overlay.active");e&&e.querySelector(".note-input-modal")&&e.remove()}function saveEditedNote(e){const t=document.querySelector(".modal-overlay.active").querySelector(".note-input-textarea").value.trim();if(!t)return void alert("Please enter some content for the note.");const n=notes.findIndex((t=>t.id===e));n>=0&&(notes[n].content=t,notes[n].timestamp=(new Date).toISOString(),saveNotes(),updateNotesList()),closeEditNoteModal()}function clearAllNotes(){confirm("Are you sure you want to delete all notes? This cannot be undone.")&&(notes=[],saveNotes(),updateNotesList())}function copyNoteToClipboard(e){const t=notes.find((t=>t.id===e));t&&navigator.clipboard.writeText(t.content).then((()=>{const t=document.querySelector(`[onclick="copyNoteToClipboard(${e})"]`),n=t.textContent;t.textContent="✓",setTimeout((()=>{t.textContent=n}),1e3)})).catch((e=>{console.error("Failed to copy to clipboard:",e)}))}function updateNotesList(){0!==notes.length?notesList.innerHTML=notes.map((e=>`\n      <div class="note-item">\n        <div class="note-header">\n          <span class="note-timestamp">${new Date(e.timestamp).toLocaleString()}</span>\n          <div class="note-actions">\n            <button class="note-action-btn" onclick="copyNoteToClipboard(${e.id})" title="Copy to clipboard">📋</button>\n            <button class="note-action-btn" onclick="editNote(${e.id})" title="Edit note">✏️</button>\n            <button class="note-action-btn" onclick="deleteNote(${e.id})" title="Delete note">🗑️</button>\n          </div>\n        </div>\n        <div class="note-content">${e.content.replace(/\n/g,"<br>")}</div>\n        ${"manual"!==e.source?`<div class="note-source">Source: ${e.source}</div>`:""}\n      </div>\n    `)).join(""):notesList.innerHTML='<div class="empty-state">No notes yet. Click "Add Note" to start.</div>'}function saveMessageToNotepad(e){const t=chatHistory[e];if(!t||"assistant"!==t.role)return;addNoteFromText(t.content,"AI response");const n=document.querySelector(`[onclick="saveMessageToNotepad(${e})"]`);if(n){const e=n.textContent;n.textContent="✓",n.style.color="#22c55e",setTimeout((()=>{n.textContent=e,n.style.color="#a3a3a3"}),1500)}}window.removeContext=removeContext,window.openTab=openTab,window.addSelectedToJournal=addSelectedToJournal;