console.log("LLM Agent: Background script loaded");let pageContexts=new Map,chatHistory=[];chrome.runtime.onInstalled.addListener((()=>{console.log("LLM Agent: Extension installed"),chrome.sidePanel.setPanelBehavior({openPanelOnActionClick:!0}),chrome.contextMenus.create({id:"open-llm-agent",title:"Open LLM Agent",contexts:["page","selection","link"]}),chrome.contextMenus.create({id:"add-page-to-context",title:"Add Page to LLM Context",contexts:["page"]}),chrome.contextMenus.create({id:"add-selection-to-context",title:"Add Selection to LLM Context",contexts:["selection"]}),chrome.contextMenus.create({id:"add-selection-to-journal",title:"Add to Journal",contexts:["selection"]}),setTimeout((()=>{chrome.tabs.query({active:!0,currentWindow:!0},(e=>{e[0]&&e[0].url&&(e[0].url.startsWith("http://")||e[0].url.startsWith("https://"))&&chrome.tabs.sendMessage(e[0].id,{type:"GET_PAGE_CONTENT"},(e=>{e&&!chrome.runtime.lastError&&(pageContexts.set("current_tab",e),console.log("Initialized current tab context:",e.url))}))}))}),1e3)})),chrome.tabs.onActivated.addListener((async e=>{console.log("Tab activated:",e.tabId);try{const t=await chrome.tabs.get(e.tabId);if(t.url&&(t.url.startsWith("http://")||t.url.startsWith("https://"))){console.log("Processing web page:",t.url);const e=()=>{chrome.tabs.sendMessage(t.id,{type:"GET_PAGE_CONTENT"},(e=>{chrome.runtime.lastError?(console.log("Content script not available, injecting manually:",chrome.runtime.lastError.message),chrome.scripting.executeScript({target:{tabId:t.id},files:["contentScript.js"]}).then((()=>{console.log("Content script injected successfully"),setTimeout((()=>{chrome.tabs.sendMessage(t.id,{type:"GET_PAGE_CONTENT"},(e=>{e&&!chrome.runtime.lastError?(pageContexts.set("current_tab",e),console.log("Auto-updated context after injection:",e.url),chrome.runtime.sendMessage({type:"CONTEXT_UPDATED",context:e}).catch((()=>{}))):(console.log("Still no response after injection"),chrome.runtime.sendMessage({type:"CONTEXT_UPDATED",context:null}).catch((()=>{})))}))}),1e3)})).catch((e=>{console.log("Failed to inject content script:",e),chrome.runtime.sendMessage({type:"CONTEXT_UPDATED",context:null}).catch((()=>{}))}))):e&&(pageContexts.set("current_tab",e),console.log("Auto-updated context for tab switch:",e.url),chrome.runtime.sendMessage({type:"CONTEXT_UPDATED",context:e}).catch((()=>{})))}))};setTimeout(e,1e3)}else console.log("Skipping non-web page:",t.url),pageContexts.delete("current_tab"),chrome.runtime.sendMessage({type:"CONTEXT_UPDATED",context:null}).catch((()=>{}))}catch(e){console.error("Error handling tab activation:",e)}})),chrome.tabs.onUpdated.addListener(((e,t,o)=>{console.log("Tab updated:",e,"changeInfo:",t,"tab URL:",o.url),"complete"===t.status&&o.url&&(o.url.startsWith("http://")||o.url.startsWith("https://"))?(console.log("Tab completed loading with URL:",o.url),chrome.tabs.query({active:!0,currentWindow:!0},(t=>{if(t[0]&&t[0].id===e){console.log("This is the active tab, updating context for navigation to:",o.url);const t=()=>{console.log("Attempting to get page content for navigation..."),chrome.tabs.sendMessage(e,{type:"GET_PAGE_CONTENT"},(t=>{chrome.runtime.lastError?(console.log("Content script not available for URL change, injecting...",chrome.runtime.lastError.message),chrome.scripting.executeScript({target:{tabId:e},files:["contentScript.js"]}).then((()=>{console.log("Content script injected for navigation"),setTimeout((()=>{chrome.tabs.sendMessage(e,{type:"GET_PAGE_CONTENT"},(e=>{e&&!chrome.runtime.lastError?(pageContexts.set("current_tab",e),console.log("Auto-updated context for URL change after injection:",e.url),chrome.runtime.sendMessage({type:"CONTEXT_UPDATED",context:e}).catch((()=>{}))):(console.log("No response after injection for URL change"),chrome.runtime.sendMessage({type:"CONTEXT_UPDATED",context:null}).catch((()=>{})))}))}),1500)})).catch((e=>{console.log("Failed to inject content script for URL change:",e),chrome.runtime.sendMessage({type:"CONTEXT_UPDATED",context:null}).catch((()=>{}))}))):t?(pageContexts.set("current_tab",t),console.log("Auto-updated context for URL change:",t.url),chrome.runtime.sendMessage({type:"CONTEXT_UPDATED",context:t}).catch((()=>{}))):(console.log("No response from content script for URL change"),chrome.runtime.sendMessage({type:"CONTEXT_UPDATED",context:null}).catch((()=>{})))}))};setTimeout(t,2e3)}else console.log("Not the active tab, ignoring URL change for tab:",e)}))):"complete"===t.status&&o.url&&(o.url.startsWith("chrome://")||o.url.startsWith("chrome-extension://")||o.url.startsWith("edge://")||o.url.startsWith("about:"))&&chrome.tabs.query({active:!0,currentWindow:!0},(t=>{t[0]&&t[0].id===e&&(console.log("Active tab navigated to non-web page:",o.url),pageContexts.delete("current_tab"),chrome.runtime.sendMessage({type:"CONTEXT_UPDATED",context:null}).catch((()=>{})))}))})),chrome.contextMenus.onClicked.addListener(((e,t)=>{switch(console.log("Context menu clicked:",e.menuItemId),e.menuItemId){case"open-llm-agent":chrome.sidePanel.open({windowId:t.windowId}).catch((()=>{chrome.sidePanel.open({tabId:t.id}).catch((e=>{console.error("Failed to open side panel:",e)}))}));break;case"add-page-to-context":chrome.tabs.sendMessage(t.id,{type:"GET_PAGE_CONTENT"},(e=>{chrome.runtime.lastError?(console.log("Content script not available for context menu, injecting..."),chrome.scripting.executeScript({target:{tabId:t.id},files:["contentScript.js"]}).then((()=>{setTimeout((()=>{chrome.tabs.sendMessage(t.id,{type:"GET_PAGE_CONTENT"},(e=>{e&&!chrome.runtime.lastError&&(pageContexts.set(e.url,e),console.log("Added page to context via context menu after injection:",e.url))}))}),1e3)})).catch((()=>{console.log("Failed to inject content script for context menu")}))):e&&(pageContexts.set(e.url,e),console.log("Added page to context via context menu:",e.url))}));break;case"add-selection-to-context":if(e.selectionText){const o={url:t.url,title:`Selection from ${t.title}`,content:e.selectionText,timestamp:Date.now()};pageContexts.set(`selection_${Date.now()}`,o),console.log("Added selection to context:",e.selectionText.substring(0,50)+"...")}break;case"add-selection-to-journal":if(e.selectionText){const o={type:"quote",content:e.selectionText,sourceUrl:t.url,sourceTitle:t.title,timestamp:(new Date).toISOString()};chrome.storage.local.set({pendingJournalEntry:o},(()=>{console.log("Stored pending journal entry for sidebar pickup")})),chrome.sidePanel.open({windowId:t.windowId}).catch((()=>{chrome.sidePanel.open({tabId:t.id}).catch((e=>{console.error("Failed to open side panel:",e)}))}))}}})),chrome.runtime.onMessage.addListener(((e,t,o)=>{switch(console.log("Background received message:",e.type),e.type){case"PAGE_DATA":e.data&&(pageContexts.set(e.data.url,e.data),console.log("Stored page data for:",e.data.url));break;case"GET_ALL_TABS":return chrome.tabs.query({},(e=>{const t=e.map((e=>({id:e.id,url:e.url,title:e.title,active:e.active})));o({tabs:t})})),!0;case"GET_CURRENT_TAB":return chrome.tabs.query({active:!0,currentWindow:!0},(e=>{e[0]?o({tab:e[0]}):o({tab:null})})),!0;case"GET_CURRENT_TAB_CONTENT":return chrome.tabs.query({active:!0,currentWindow:!0},(e=>{if(e[0]&&e[0].url&&(e[0].url.startsWith("http://")||e[0].url.startsWith("https://"))){const t=e[0].id;chrome.tabs.sendMessage(t,{type:"GET_PAGE_CONTENT"},(e=>{chrome.runtime.lastError?(console.log("GET_CURRENT_TAB_CONTENT: Content script not available, injecting..."),chrome.scripting.executeScript({target:{tabId:t},files:["contentScript.js"]}).then((()=>{setTimeout((()=>{chrome.tabs.sendMessage(t,{type:"GET_PAGE_CONTENT"},(e=>{o(e||null)}))}),1e3)})).catch((()=>{o(null)}))):o(e||null)}))}else o(null)})),!0;case"GET_TAB_CONTENT":return e.tabId&&chrome.tabs.sendMessage(e.tabId,{type:"GET_PAGE_CONTENT"},(e=>{o(e)})),!0;case"GET_STORED_CONTEXTS":o({contexts:Array.from(pageContexts.values())});break;case"CLEAR_CONTEXTS":pageContexts.clear(),o({success:!0});break;case"SAVE_CHAT_HISTORY":chatHistory=e.history||[],o({success:!0});break;case"GET_CHAT_HISTORY":o({history:chatHistory})}})),setInterval((()=>{if(pageContexts.size>50){const e=Array.from(pageContexts.entries());e.sort(((e,t)=>t[1].timestamp-e[1].timestamp)),pageContexts.clear(),e.slice(0,50).forEach((([e,t])=>{pageContexts.set(e,t)})),console.log("Cleaned up old contexts, keeping 50 most recent")}}),3e5);