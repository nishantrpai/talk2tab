{"version":3,"file":"contentScript.js","mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,aAAa,IAAI,SAAS;AAC9C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,mBAAmB,eAAe;AAClC;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,C","sources":["webpack://llm-agent-extension/./src/contentScript.js"],"sourcesContent":["// Content script for Snip Chrome Extension\n// This script runs in the context of web pages and handles:\n// - Page content extraction\n// - Communication with the sidebar\n// - Tab/link context management\n\nconsole.log('Snip: Content script loaded');\n\n// Track current page info\nlet currentPageData = {\n  url: window.location.href,\n  title: document.title,\n  content: '',\n  timestamp: Date.now()\n};\n\n// Extract favicon URL from the page\nconst extractFavicon = () => {\n  // Try to find favicon link tag\n  let faviconUrl = null;\n  \n  // Look for various favicon link tags\n  const faviconSelectors = [\n    'link[rel*=\"icon\"]',\n    'link[rel=\"shortcut icon\"]',\n    'link[rel=\"apple-touch-icon\"]',\n    'link[rel=\"icon\"]'\n  ];\n  \n  for (const selector of faviconSelectors) {\n    const link = document.querySelector(selector);\n    if (link && link.getAttribute('href')) {\n      faviconUrl = link.getAttribute('href');\n      // Convert relative URLs to absolute\n      if (faviconUrl && !faviconUrl.startsWith('http')) {\n        faviconUrl = new URL(faviconUrl, window.location.href).href;\n      }\n      break;\n    }\n  }\n  \n  // Fallback to default favicon.ico\n  if (!faviconUrl) {\n    const url = new URL(window.location.href);\n    faviconUrl = `${url.protocol}//${url.host}/favicon.ico`;\n  }\n  \n  return faviconUrl;\n};\n\n// Extract page content for LLM context\nconst extractPageContent = () => {\n  try {\n    // Get full HTML content including structure, links, etc.\n    let content = '';\n    \n    // Try to get main content areas first (article, main, content areas)\n    const mainSelectors = [\n      'main',\n      'article', \n      '[role=\"main\"]',\n      '.content',\n      '.main-content',\n      '#content',\n      '#main'\n    ];\n    \n    let mainElement = null;\n    for (const selector of mainSelectors) {\n      mainElement = document.querySelector(selector);\n      if (mainElement) break;\n    }\n    \n    // If we found a main content area, use that, otherwise use body\n    const targetElement = mainElement || document.body;\n    \n    if (targetElement) {\n      // Get the full innerText to preserve structure and links\n      content = targetElement.innerText || '';\n      \n      // Also include text content as fallback\n      if (!content) {\n        content = targetElement.innerText || targetElement.textContent || '';\n      }\n    }\n    \n    console.log('Snip: Extracted content details:', {\n      selector: mainElement ? 'main content area' : 'document.body',\n      contentLength: content.length,\n      url: window.location.href,\n      title: document.title\n    });\n    \n    // Clean up content - remove script tags and excessive whitespace\n    let cleanContent = content\n      .replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '') // Remove script tags\n      .replace(/<style\\b[^<]*(?:(?!<\\/style>)<[^<]*)*<\\/style>/gi, '') // Remove style tags\n      .replace(/\\s+/g, ' ') // Normalize whitespace\n      .trim();\n    \n    return {\n      url: window.location.href,\n      title: document.title,\n      content: cleanContent,\n      favicon: extractFavicon(),\n      timestamp: Date.now()\n    };\n  } catch (error) {\n    console.error('Snip: Error extracting page content:', error);\n    \n    // Fallback to basic text extraction\n    const fallbackContent = document.body ? (document.body.innerText || document.body.textContent || '') : '';\n    \n    return {\n      url: window.location.href,\n      title: document.title,\n      content: fallbackContent.replace(/\\s+/g, ' ').trim(),\n      favicon: extractFavicon(),\n      timestamp: Date.now()\n    };\n  }\n};\n\n// Send page data to extension\nconst sendPageData = (data) => {\n  chrome.runtime.sendMessage({\n    type: 'PAGE_DATA',\n    data: data\n  });\n};\n\n// Listen for messages from extension\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n  if (request.type === 'GET_PAGE_CONTENT') {\n    const pageData = extractPageContent();\n    sendResponse(pageData);\n  } else if (request.type === 'ADD_CURRENT_PAGE') {\n    const pageData = extractPageContent();\n    sendPageData(pageData);\n    sendResponse({ success: true });\n  }\n});\n\n// Initialize when page loads\nwindow.addEventListener('DOMContentLoaded', () => {\n  console.log('Snip: Page loaded, ready to extract content');\n  currentPageData = extractPageContent();\n});\n\n// Handle navigation changes\nlet lastUrl = window.location.href;\nconst checkForNavigation = () => {\n  if (lastUrl !== window.location.href) {\n    console.log('Snip: Navigation detected');\n    lastUrl = window.location.href;\n    currentPageData = extractPageContent();\n  }\n};\n\n// Check for navigation changes periodically\nsetInterval(checkForNavigation, 1000);\n\n// Handle keyboard shortcuts for adding selected text to journal\ndocument.addEventListener('keydown', (e) => {\n  // Ctrl+J to add selected text to journal\n  if (e.ctrlKey && e.key === 'j') {\n    e.preventDefault();\n    \n    // Get the selected text\n    const selection = window.getSelection();\n    if (!selection || selection.isCollapsed) {\n      return;\n    }\n    \n    const selectedText = selection.toString().trim();\n    if (!selectedText) {\n      return;\n    }\n    \n    // Create journal entry data\n    const journalEntry = {\n      content: selectedText,\n      sourceUrl: window.location.href,\n      sourceTitle: document.title,\n      timestamp: new Date().toISOString()\n    };\n    \n    // Send to background script to save to journal\n    chrome.runtime.sendMessage({\n      type: 'ADD_TO_JOURNAL',\n      entry: journalEntry\n    });\n    \n    // Clear selection\n    selection.removeAllRanges();\n    \n    // Show a brief visual feedback\n    showSelectionFeedback();\n  }\n});\n\n// Show visual feedback when text is added to journal\nfunction showSelectionFeedback() {\n  const feedback = document.createElement('div');\n  feedback.style.cssText = `\n    position: fixed;\n    top: 20px;\n    right: 20px;\n    background: #2563eb;\n    color: white;\n    padding: 12px 16px;\n    border-radius: 6px;\n    font-size: 14px;\n    z-index: 10000;\n    border: 1px solid #3b82f6;\n    font-family: system-ui, -apple-system, sans-serif;\n    box-shadow: 0 4px 12px rgba(0,0,0,0.3);\n  `;\n  feedback.textContent = 'âœ“ Added to Journal';\n  document.body.appendChild(feedback);\n  \n  setTimeout(() => {\n    feedback.remove();\n  }, 2000);\n}"],"names":[],"sourceRoot":""}