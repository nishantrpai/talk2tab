{"version":3,"file":"background.js","mappings":";;;;;AAAA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sCAAsC,8BAA8B;AACpE,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,uBAAuB,eAAe;AACtC,OAAO;AACP,mBAAmB;AACnB;AACA;AACA;AACA;AACA,iDAAiD,0BAA0B;AAC3E;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,qBAAqB,6CAA6C;AAClE;AACA;AACA;AACA;AACA;AACA,qBAAqB,eAAe;AACpC;AACA;AACA;AACA;AACA;AACA,qBAAqB,eAAe;AACpC;AACA;AACA;AACA;AACA,qBAAqB,sBAAsB;AAC3C;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,uCAAuC,0BAA0B;AACjE;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,CAAC,WAAW","sources":["webpack://llm-agent-extension/./src/background.js"],"sourcesContent":["// Background script for LLM Agent Chrome Extension\n// Handles extension lifecycle, tab management, and data storage\n\nconsole.log('LLM Agent: Background script loaded');\n\n// Storage for page contexts and visited links\nlet pageContexts = new Map();\nlet chatHistory = [];\n\n// Initialize extension\nchrome.runtime.onInstalled.addListener(() => {\n  console.log('LLM Agent: Extension installed');\n  \n  // Set up side panel\n  chrome.sidePanel.setPanelBehavior({ openPanelOnActionClick: true });\n});\n\n// Handle messages from content scripts and sidebar\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n  console.log('Background received message:', request.type);\n  \n  switch (request.type) {\n    case 'PAGE_DATA':\n      // Store page data from content script\n      if (request.data) {\n        pageContexts.set(request.data.url, request.data);\n        console.log('Stored page data for:', request.data.url);\n      }\n      break;\n      \n    case 'GET_ALL_TABS':\n      // Get all open tabs\n      chrome.tabs.query({}, (tabs) => {\n        const tabData = tabs.map(tab => ({\n          id: tab.id,\n          url: tab.url,\n          title: tab.title,\n          active: tab.active\n        }));\n        sendResponse({ tabs: tabData });\n      });\n      return true; // Keep message channel open for async response\n      \n    case 'GET_TAB_CONTENT':\n      // Get content from specific tab\n      if (request.tabId) {\n        chrome.tabs.sendMessage(request.tabId, { type: 'GET_PAGE_CONTENT' }, (response) => {\n          sendResponse(response);\n        });\n      }\n      return true;\n      \n    case 'GET_STORED_CONTEXTS':\n      // Return all stored page contexts\n      sendResponse({ contexts: Array.from(pageContexts.values()) });\n      break;\n      \n    case 'CLEAR_CONTEXTS':\n      // Clear all stored contexts\n      pageContexts.clear();\n      sendResponse({ success: true });\n      break;\n      \n    case 'SAVE_CHAT_HISTORY':\n      // Save chat history\n      chatHistory = request.history || [];\n      sendResponse({ success: true });\n      break;\n      \n    case 'GET_CHAT_HISTORY':\n      // Get chat history\n      sendResponse({ history: chatHistory });\n      break;\n  }\n});\n\n// Listen for tab updates to automatically capture page content\nchrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {\n  if (changeInfo.status === 'complete' && tab.url && !tab.url.startsWith('chrome://')) {\n    // Give the page a moment to load, then extract content\n    setTimeout(() => {\n      chrome.tabs.sendMessage(tabId, { type: 'GET_PAGE_CONTENT' }, (response) => {\n        if (response && !chrome.runtime.lastError) {\n          pageContexts.set(response.url, response);\n          console.log('Auto-captured page content for:', response.url);\n        }\n      });\n    }, 2000);\n  }\n});\n\n// Clean up old contexts (keep only last 50 pages)\nsetInterval(() => {\n  if (pageContexts.size > 50) {\n    const entries = Array.from(pageContexts.entries());\n    // Sort by timestamp and keep only the most recent 50\n    entries.sort((a, b) => b[1].timestamp - a[1].timestamp);\n    pageContexts.clear();\n    entries.slice(0, 50).forEach(([url, data]) => {\n      pageContexts.set(url, data);\n    });\n    console.log('Cleaned up old contexts, keeping 50 most recent');\n  }\n}, 300000); // Run every 5 minutes\n"],"names":[],"sourceRoot":""}